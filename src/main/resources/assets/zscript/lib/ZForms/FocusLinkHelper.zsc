/// A helper class for setting focus links between elements non annoyingly.
///
/// This assumes a grid layout, and as such cannot currently handle every menu
/// possibility.
class HXDD_ZF_FocusLinkHelper ui {
	private Array<HXDD_ZF_Element> elements;
	private uint width;
	private uint height;
	private bool horzWraparound;
	private bool vertWraparound;

	/// Returns a newly created focus link helper.
	///
	/// The assumed grid has width `width` and height `height`. If
	/// `horzWraparound` is set, then going right on the right edge of the grid
	/// will go to the very left element, and vice versa. `vertWraparound`
	/// works similarly, for the vertical edges.
	static HXDD_ZF_FocusLinkHelper create(uint width, uint height, bool horzWraparound, bool vertWraparound) {
		let ret = new("HXDD_ZF_FocusLinkHelper");

		ret.width = width;
		ret.height = height;
		ret.elements.resize(width * height);
		ret.horzWraparound = horzWraparound;
		ret.vertWraparound = vertWraparound;

		return ret;
	}

	/// Sets the element at the given row and column to be the element `elem`.
	///
	/// Once all elements are added, [`setLinks`] should be called to actually
	/// set up the focus neighbors.
	void setElement(uint row, uint col, HXDD_ZF_Element elem) {
		if (row >= height) throwAbortException("row >= height");
		if (col >= width) throwAbortException("col >= width");
		elements[row * width + col] = elem;
	}

	private void setUp(uint row, uint col) {
		let newRow = row - 1;
		if (row == 0) {
			if (!vertWraparound) return;
			newRow = height - 1;
		}
		elements[row * width + col].setFocusNeighbor(HXDD_ZF_NavEventType_Up, elements[newRow * width + col]);
	}
	private void setDown(uint row, uint col) {
		let newRow = row + 1;
		if (row == height - 1) {
			if (!vertWraparound) return;
			newRow = 0;
		}
		elements[row * width + col].setFocusNeighbor(HXDD_ZF_NavEventType_Down, elements[newRow * width + col]);
	}
	private void setLeft(uint row, uint col) {
		let newCol = col - 1;
		if (col == 0) {
			if (!horzWraparound) return;
			newCol = width - 1;
		}
		elements[row * width + col].setFocusNeighbor(HXDD_ZF_NavEventType_Left, elements[row * width + newCol]);
	}
	private void setRight(uint row, uint col) {
		let newCol = col + 1;
		if (col == width - 1) {
			if (!horzWraparound) return;
			newCol = 0;
		}
		elements[row * width + col].setFocusNeighbor(HXDD_ZF_NavEventType_Right, elements[row * width + newCol]);
	}

	/// Sets up the elements' focus neighbors.
	///
	/// This should be called after setting all elements via [`setElement`].
	void setLinks() {
		for (uint r = 0; r < height; r++) {
			for (uint c = 0; c < width; c++) {
				if (elements[r * width + c] == NULL) continue;
				setUp(r, c);
				setDown(r, c);
				setLeft(r, c);
				setRight(r, c);
			}
		}
	}
}
