package lemon.hxdd.builder;

import lemon.hxdd.Application;

import java.io.*;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.util.Collections;
import java.util.concurrent.atomic.AtomicReference;

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

public class SoundInfo {
    Application app;

    SoundInfo(Application app) {
        this.app = app;
    }
    public void Export() {
        String SettingPathTemp = this.app.settings.GetPath("temp");
        File fileSoundInfo = new File(SettingPathTemp + "/sndinfo.hx2");
        AtomicReference<String> sndinfo = new AtomicReference<>("");
        try {
            ResourceWalker rw = new ResourceWalker("hexen2");
            rw.files.forEach((o) -> {
                if (o.getKey().contains("sndinfo.hx2")) {
                    try {
                        sndinfo.set(new String(Files.readAllBytes(o.getValue().toPath())));
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            });

            FileWriter fw = new FileWriter(SettingPathTemp + "/sndinfo.hx2", true);
            PrintWriter out = new PrintWriter(fw);
            AddGeneratedByTag(out);
            ListFiles(null, out);
            out.println("\n");
            out.println(sndinfo.get());
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    private void ListFiles(String path, PrintWriter out) {
        if (path == null) {
            path = this.app.settings.GetPath("hexen2") + "/sound";
        }

        String directoryName = path;
        File directory = new File(directoryName);

        File[] fileList = directory.listFiles();
        if (fileList != null) {
            for (File file : fileList) {
                if (file.isFile()) {
                    try {
                        String p = file.getCanonicalPath();
                        p = p.replace("\\", "/");

                        String[] s = p.split("hexen2_data");
                        String logicalname = (String) s[1].subSequence(1, s[1].length() - 4);
                        String lumpname = (String) s[1].subSequence(1, s[1].length());

                        // Setup naming convention and folder paths
                        logicalname = logicalname.replace("sound", "hexen2");
                        lumpname = lumpname.replace("sound", "sounds/hexen2");

                        String space = String.join("", Collections.nCopies(32 - logicalname.length(), " "));    // dumb, but it works
                        out.println(logicalname + space + "\"" + lumpname + "\"");
                    } catch (IOException ignored) {

                    }
                } else if (file.isDirectory()) {
                    out.println("");
                    ListFiles(file.getAbsolutePath(), out);
                }
            }
        }
    }

    private void AddGeneratedByTag(PrintWriter writer) {
        writer.print("\n//\n// Generated by HXDD\n//\n\n");
    }
}
